#!/bin/bash

# AKUMA's Advanced CrossC2 Portable Setup
# –î–µ–ª–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–º, –∫–∞–∫ USB —Å —Ö–∞–∫–µ—Ä—Å–∫–∏–º–∏ —Ç—É–ª–∑–∞–º–∏! üöÄ

echo "üöÄ AKUMA's Advanced CrossC2 Portable Setup v2.0 üöÄ"
echo "–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –∑–≤–µ—Ä—è!"
echo ""

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $SCRIPT_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π
update_paths() {
    local target_dir="$1"
    echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $target_dir"
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª CrossC2
    local main_file="$target_dir/CrossC2-GithubBot-2023-11-20.cna"
    if [[ -f "$main_file" ]]; then
        echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º $main_file"
        
        # –°–æ–∑–¥–∞–µ–º backup —Å timestamp
        cp "$main_file" "$main_file.backup.$(date +%Y%m%d_%H%M%S)"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
        sed -i "s|\\$CC2_PATH = \"[^\"]*genCrossC2\.Linux\"|\$CC2_PATH = \"$target_dir/genCrossC2.Linux\"|g" "$main_file"
        sed -i "s|\\$CC2_BIN = \"[^\"]*genCrossC2\.MacOS\"|\$CC2_BIN = \"$target_dir/genCrossC2.MacOS\"|g" "$main_file"
        
        echo "   ‚úÖ CC2_PATH -> $target_dir/genCrossC2.Linux"
        echo "   ‚úÖ CC2_BIN  -> $target_dir/genCrossC2.MacOS"
    else
        echo "   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $main_file"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º CrossC2Kit —Ñ–∞–π–ª—ã
    local kit_dir="$target_dir/CrossC2Kit-GithubBot-2023-11-20/CrossC2Kit"
    if [[ -d "$kit_dir" ]]; then
        echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º CrossC2Kit —Ñ–∞–π–ª—ã..."
        
        for file in "$kit_dir/CrossC2Kit.cna" "$kit_dir/CrossC2Kit_Loader.cna"; do
            if [[ -f "$file" ]]; then
                cp "$file" "$file.backup.$(date +%Y%m%d_%H%M%S)"
                # –ó–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–µ
                sed -i "s|/home/[^/]*/[^/]*/CobaltStrike|$target_dir|g" "$file"
                sed -i "s|/home/akuma/Desktop/CobaltStrike|$target_dir|g" "$file"
                sed -i "s|/home/akuma/Documents/CobaltStrike|$target_dir|g" "$file"
                echo "   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: $(basename "$file")"
            fi
        done
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º CNA —Å–∫—Ä–∏–ø—Ç—ã —Å C2 IP
    update_cna_scripts "$target_dir"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
check_files() {
    local missing_files=()
    
    if [[ ! -f "$SCRIPT_DIR/CrossC2-GithubBot-2023-11-20.cna" ]]; then
        missing_files+=("CrossC2-GithubBot-2023-11-20.cna")
    fi
    
    if [[ ! -f "$SCRIPT_DIR/genCrossC2.Linux" ]]; then
        missing_files+=("genCrossC2.Linux")
    fi
    
    if [[ ! -f "$SCRIPT_DIR/genCrossC2.MacOS" ]]; then
        missing_files+=("genCrossC2.MacOS")
    fi
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:"
        for file in "${missing_files[@]}"; do
            echo "   - $file"
        done
        echo ""
        echo "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—à—å —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ CobaltStrike!"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CNA —Å–∫—Ä–∏–ø—Ç–æ–≤
update_cna_scripts() {
    local target_dir="$1"
    local cna_dir="$target_dir/cna-scripts"
    
    if [[ ! -d "$cna_dir" ]]; then
        echo "üìù CNA —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ IP"
        return
    fi
    
    echo "üåê –û–±–Ω–æ–≤–ª—è–µ–º C2 IP –∞–¥—Ä–µ—Å–∞ –≤ CNA —Å–∫—Ä–∏–ø—Ç–∞—Ö..."
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π IP
    local current_ip=$(get_current_ip)
    if [[ -z "$current_ip" ]]; then
        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π IP, –∏—Å–ø–æ–ª—å–∑—É–µ–º 192.168.1.17"
        current_ip="192.168.1.17"
    fi
    
    echo "üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º C2 IP: $current_ip"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º IP –≤–æ –≤—Å–µ—Ö CNA —Å–∫—Ä–∏–ø—Ç–∞—Ö
    for cna_file in "$cna_dir/"*.cna; do
        if [[ -f "$cna_file" ]]; then
            echo "   üîß –û–±–Ω–æ–≤–ª—è–µ–º $(basename "$cna_file")"
            
            # –°–æ–∑–¥–∞–µ–º backup
            cp "$cna_file" "$cna_file.backup.$(date +%Y%m%d_%H%M%S)"
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π IP –Ω–∞ –Ω–æ–≤—ã–π
            sed -i "s|%akuma_config\[\"c2_server\"\] = \"[^\"]*\"|%akuma_config[\"c2_server\"] = \"$current_ip\"|g" "$cna_file"
            sed -i "s|%rapid_config\[\"c2_server\"\] = \"[^\"]*\"|%rapid_config[\"c2_server\"] = \"$current_ip\"|g" "$cna_file"
            
            echo "     ‚úÖ C2 IP –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: $current_ip"
        fi
    done
    
    echo "‚úÖ –í—Å–µ CNA —Å–∫—Ä–∏–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –Ω–æ–≤—ã–º C2 IP!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ IP
get_current_ip() {
    local ip=""
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è IP
    # 1. –í–Ω–µ—à–Ω–∏–π IP (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
    ip=$(curl -s --connect-timeout 5 ifconfig.me 2>/dev/null)
    if [[ -n "$ip" && "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo "$ip"
        return
    fi
    
    # 2. –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    ip=$(ip route get 8.8.8.8 2>/dev/null | awk 'NR==1 {print $7}')
    if [[ -n "$ip" && "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo "$ip"
        return
    fi
    
    # 3. –ü–µ—Ä–≤—ã–π IP –∏–∑ ip addr
    ip=$(ip addr show 2>/dev/null | grep 'inet ' | grep -v '127.0.0.1' | head -1 | awk '{print $2}' | cut -d'/' -f1)
    if [[ -n "$ip" && "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo "$ip"
        return
    fi
    
    # 4. hostname -I (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
    ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    if [[ -n "$ip" && "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo "$ip"
        return
    fi
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    echo ""
}

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º –ø—É—Ç–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
create_path_marker() {
    echo "$SCRIPT_DIR" > "$SCRIPT_DIR/.current_path"
    echo "üìç –°–æ–∑–¥–∞–Ω –º–∞—Ä–∫–µ—Ä –ø—É—Ç–∏: $SCRIPT_DIR/.current_path"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if ! check_files; then
        exit 1
    fi
    
    echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–ª—Å—è –ª–∏ –ø—É—Ç—å
    local path_marker="$SCRIPT_DIR/.current_path"
    local need_update=false
    
    if [[ -f "$path_marker" ]]; then
        local old_path=$(cat "$path_marker")
        if [[ "$old_path" != "$SCRIPT_DIR" ]]; then
            echo "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—É—Ç–∏!"
            echo "   –°—Ç–∞—Ä—ã–π: $old_path"
            echo "   –ù–æ–≤—ã–π:  $SCRIPT_DIR"
            need_update=true
        else
            echo "‚ÑπÔ∏è  –ü—É—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –æ–±–Ω–æ–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π..."
            need_update=true
        fi
    else
        echo "üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
        need_update=true
    fi
    
    if [[ "$need_update" == true ]]; then
        update_paths "$SCRIPT_DIR"
        create_path_marker
        echo ""
        echo "üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑: $SCRIPT_DIR"
        echo ""
        echo "üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
        echo "   \$CC2_PATH = \"$SCRIPT_DIR/genCrossC2.Linux\""
        echo "   \$CC2_BIN = \"$SCRIPT_DIR/genCrossC2.MacOS\""
    else
        echo "‚ú® –ü—Ä–æ–µ–∫—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
    fi
    
    echo ""
    echo "üí° Pro tip: –ó–∞–ø—É—Å–∫–∞–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "ü§ò –ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –º–æ–π —Ç–∏–º–ª–∏–¥: 'Portable –∫–æ–¥ ‚Äî —ç—Ç–æ –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π backdoor: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ!'"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main "$@"
